This is an outline of the entire program and the process of processing a C file

1.) Find the file(s) to open and open it(/them) (duh)
2.) Go through file and translate it into a sequence of preprocessing tokens
    A.) This includes separate ways of representing whitespace and newlines,
        as they are important lexical elements in pre-processing
    B.) This goes through the entire file
3.) Go through the sequence of pptokens and execute preprocessing directives, 
    expand macros, and perform pragmas. Delete executed preprocessing directives
    A.) The include directive causes the included file to undergo steps 1-3, and
        have the resulting pptoken sequence inserted where the include directive
        is in the including file's sequence
4.) Clean up pptoken sequence
    A.) Translate "source character set" members and escape sequences to the 
        "execution character set". I'll be honest, I don't completely understand
        what this looks like. 
        a.) I think in this case it just means making sure every character
            and escape sequence gets mapped to an unsigned char datatype
        b.) I don't think this matters much beyond escape sequences, as I
            don't want to get into representing multibyte chars and unicode
    B.) Adjacent string literals get concatenated
        a.) Before part C happens
    C.) Whitespace and newline tokens are removed
5.) Transform pptoken sequence into a token sequence
6.) The token sequence is parsed into an AST
    A.) Linking identifiers to objects with the proper scope can be done by
        working up from the occurence and searching for the closest declaration
        a.) Can also be done by maintaining a hash table and performing a DFS
        b.) The hash DFS approach has the advantage of being more customizable
        c.) This could be done on the fly, as the parser is already depth-first
7.) Maybe clean-up necessary on AST
8.) Maybe generate an "object file" in a kind of BF asm bytecode which has the
    almost-finished program, save for some exact memory locations and functions
    A.) This won't be an actual file, just a struct
    B.) When generated, it will keep track of presumed external identifiers, and
        where they are in code
    C.) It will probably need to keep track of macros and functions separately
        a.) Specifically, external and undefined macros and all functions
            1.) Macros will get expanded in the AST 
        b.) It's difficult to tell whether an undefined called process is a 
            macro or not
            1.) One approach could be to just go strict, and treat
                them all as functions
            2.) However, it'd be nice to have a macro treated as such
            3.) So, we'll use the call instruction like it's a function, but say
                it's undefined
            4.) If it's defined as a macro elsewhere, then that will be changed
                in the bytecode and object file
    D.) It also needs to link variable memory locations to where in the code
        they're used, so that any other loading can happen
    E.) Basically, every object and function needs to have its references
        highlighted